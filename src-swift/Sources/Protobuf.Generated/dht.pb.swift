// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dht.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// This file is from libp2p-kad package
// Modified by Shota Shimazu

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Record represents a dht record that contains a value
/// for a key value pair
public struct Dht_Pb_Record {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The key that references this record
  public var key: Data = Data()

  /// The actual value this record is storing
  public var value: Data = Data()

  /// Time the record was received, set by receiver
  public var timeReceived: String = String()

  /// The original publisher of the record.
  /// Currently specific to rust-libp2p.
  public var publisher: Data = Data()

  /// The remaining TTL of the record, in seconds.
  /// Currently specific to rust-libp2p.
  public var ttl: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dht_Pb_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// defines what type of message it is.
  public var type: Dht_Pb_Message.MessageType = .putValue

  /// defines what coral cluster level this query/response belongs to.
  /// in case we want to implement coral's cluster rings in the future.
  public var clusterLevelRaw: Int32 = 0

  /// Used to specify the key associated with this message.
  /// PUT_VALUE, GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
  public var key: Data = Data()

  /// Used to return a value
  /// PUT_VALUE, GET_VALUE
  public var record: Dht_Pb_Record {
    get {return _record ?? Dht_Pb_Record()}
    set {_record = newValue}
  }
  /// Returns true if `record` has been explicitly set.
  public var hasRecord: Bool {return self._record != nil}
  /// Clears the value of `record`. Subsequent reads from it will return its default value.
  public mutating func clearRecord() {self._record = nil}

  /// Used to return peers closer to a key in a query
  /// GET_VALUE, GET_PROVIDERS, FIND_NODE
  public var closerPeers: [Dht_Pb_Message.Peer] = []

  /// Used to return Providers
  /// GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
  public var providerPeers: [Dht_Pb_Message.Peer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum MessageType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case putValue // = 0
    case getValue // = 1
    case addProvider // = 2
    case getProviders // = 3
    case findNode // = 4
    case ping // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .putValue
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .putValue
      case 1: self = .getValue
      case 2: self = .addProvider
      case 3: self = .getProviders
      case 4: self = .findNode
      case 5: self = .ping
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .putValue: return 0
      case .getValue: return 1
      case .addProvider: return 2
      case .getProviders: return 3
      case .findNode: return 4
      case .ping: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum ConnectionType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// sender does not have a connection to peer, and no extra information (default)
    case notConnected // = 0

    /// sender has a live connection to peer
    case connected // = 1

    /// sender recently connected to peer
    case canConnect // = 2

    /// sender recently tried to connect to peer repeatedly but failed to connect
    /// ("try" here is loose, but this should signal "made strong effort, failed")
    case cannotConnect // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .notConnected
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .notConnected
      case 1: self = .connected
      case 2: self = .canConnect
      case 3: self = .cannotConnect
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .notConnected: return 0
      case .connected: return 1
      case .canConnect: return 2
      case .cannotConnect: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Peer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of a given peer.
    public var id: Data = Data()

    /// multiaddrs for a given peer
    public var addrs: [Data] = []

    /// used to signal the sender's connection capabilities to the peer
    public var connection: Dht_Pb_Message.ConnectionType = .notConnected

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _record: Dht_Pb_Record? = nil
}

#if swift(>=4.2)

extension Dht_Pb_Message.MessageType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Dht_Pb_Message.MessageType] = [
    .putValue,
    .getValue,
    .addProvider,
    .getProviders,
    .findNode,
    .ping,
  ]
}

extension Dht_Pb_Message.ConnectionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Dht_Pb_Message.ConnectionType] = [
    .notConnected,
    .connected,
    .canConnect,
    .cannotConnect,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Dht_Pb_Record: @unchecked Sendable {}
extension Dht_Pb_Message: @unchecked Sendable {}
extension Dht_Pb_Message.MessageType: @unchecked Sendable {}
extension Dht_Pb_Message.ConnectionType: @unchecked Sendable {}
extension Dht_Pb_Message.Peer: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "dht.pb"

extension Dht_Pb_Record: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Record"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
    5: .same(proto: "timeReceived"),
    666: .same(proto: "publisher"),
    777: .same(proto: "ttl"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.timeReceived) }()
      case 666: try { try decoder.decodeSingularBytesField(value: &self.publisher) }()
      case 777: try { try decoder.decodeSingularUInt32Field(value: &self.ttl) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    if !self.timeReceived.isEmpty {
      try visitor.visitSingularStringField(value: self.timeReceived, fieldNumber: 5)
    }
    if !self.publisher.isEmpty {
      try visitor.visitSingularBytesField(value: self.publisher, fieldNumber: 666)
    }
    if self.ttl != 0 {
      try visitor.visitSingularUInt32Field(value: self.ttl, fieldNumber: 777)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dht_Pb_Record, rhs: Dht_Pb_Record) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.timeReceived != rhs.timeReceived {return false}
    if lhs.publisher != rhs.publisher {return false}
    if lhs.ttl != rhs.ttl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dht_Pb_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    10: .same(proto: "clusterLevelRaw"),
    2: .same(proto: "key"),
    3: .same(proto: "record"),
    8: .same(proto: "closerPeers"),
    9: .same(proto: "providerPeers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.key) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._record) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.closerPeers) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.providerPeers) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.clusterLevelRaw) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .putValue {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 2)
    }
    try { if let v = self._record {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.closerPeers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.closerPeers, fieldNumber: 8)
    }
    if !self.providerPeers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.providerPeers, fieldNumber: 9)
    }
    if self.clusterLevelRaw != 0 {
      try visitor.visitSingularInt32Field(value: self.clusterLevelRaw, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dht_Pb_Message, rhs: Dht_Pb_Message) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.clusterLevelRaw != rhs.clusterLevelRaw {return false}
    if lhs.key != rhs.key {return false}
    if lhs._record != rhs._record {return false}
    if lhs.closerPeers != rhs.closerPeers {return false}
    if lhs.providerPeers != rhs.providerPeers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dht_Pb_Message.MessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PUT_VALUE"),
    1: .same(proto: "GET_VALUE"),
    2: .same(proto: "ADD_PROVIDER"),
    3: .same(proto: "GET_PROVIDERS"),
    4: .same(proto: "FIND_NODE"),
    5: .same(proto: "PING"),
  ]
}

extension Dht_Pb_Message.ConnectionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_CONNECTED"),
    1: .same(proto: "CONNECTED"),
    2: .same(proto: "CAN_CONNECT"),
    3: .same(proto: "CANNOT_CONNECT"),
  ]
}

extension Dht_Pb_Message.Peer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dht_Pb_Message.protoMessageName + ".Peer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "addrs"),
    3: .same(proto: "connection"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedBytesField(value: &self.addrs) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.connection) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.addrs.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.addrs, fieldNumber: 2)
    }
    if self.connection != .notConnected {
      try visitor.visitSingularEnumField(value: self.connection, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dht_Pb_Message.Peer, rhs: Dht_Pb_Message.Peer) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.addrs != rhs.addrs {return false}
    if lhs.connection != rhs.connection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
